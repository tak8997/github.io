## HTTPS

SSL 인증서는 클라이언트와 서버간의 통신을 제 3자가 보증해주는 전자화 된 문서. 클라이언트가 서버에 접속한 직후 서버는 클라이언트에게 이 인증서 정보를 전달. 클라이언트는 이 인증서 정보가 신뢰할 수 있는 것인지
검증 한 후에 다음 절차 수행. 즉, 클라이언트가 접속한 서버가 클라이언트가 의도한 서버가 맞는지를 보장하는 역할.
어떻게 그 역할 보장? CA(certificate authority, root certificate) - symantec, comodo, godaddy, globalsign 등등..


기능
 - 클라이언트가 접속한 서버가 신뢰 할 수 있는 서버임을 보장
 - 그 서버가 SSL 통신에 사용할 공개키를 클라이언트에게 제공한다.


이점 
 - 통신 내용이 공격자에게 노출되는 것 방지
 - 클라이언트가 접속하려는 서버가 신뢰할 수 있는 서버인지 판단
 - 통신 내용 악의적인 변경 방지


</br>
</br>

https://livvy.byb.kr/posts/hello-tls-1-3/


### 대칭키

암호화 할 때 사용하는 일종의 비밀번호를 **키(Key)** 라고 한다. 이 키에 따라 암호화된 결과가 달라지기 때문에 키를 모르면 복호화를 할 수 없다.
**대칭키는 동일한 키로 암호화 복호화를 같이 할 수 있는 방식의 암호화 기법.**
예를 들어, 암호화 할 때 1234라는 값을 사용했다면, 복호화 할 때도 1234값을 입력해야 한다.

문제점 - 키 값 또한 대상에게 전송해야함. 이 과정에서 키가 노출 될 수 있음.

DES AES 같은 것들이 있음

</br>


### 공개키(PKI)

키가 2개. **A키로 암호화를 하면 B키로 복호화 할 수 있고, B키로 암호화하면 A키로 복호화 할 수 있는 방식**
비공개키, 공개키 가 있음.
공개키로 암호화하고 비공개키로 복호화 : 이는 공개키가 탈취당해도 상관없음. 어차피 비공개키가 없으면 복호화 할 수 없기 때문. 

RSA 같은 것들이 있음


해시 함수의 결과 : 해시 값 혹은 메시지 다이제스트
ex) MessageDigest.getInstance("SHA-256") -> sha-256을 해시 알고리즘으로 사용하겠다


Base64인코딩 - 바이너리 데이터의 손실을 막는다.


루트 인증서는 Android N에 약 150 개가 포함 된 Android 장치에 사전 설치됩니다.

leaf certificate -
https://stackoverflow.com/questions/43605755/whats-the-leaf-certificate-and-sub-certificate-used-for-and-how-to-use-them


작성중...


